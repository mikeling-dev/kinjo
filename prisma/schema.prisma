generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String?
  googleId       String?          @unique
  name           String?
  phoneNumber    String?          @map("phone_number")
  isHost         Boolean          @default(false) @map("is_host")
  createdAt      DateTime         @default(now()) @map("created_at")
  
  // Relations
  listings       Listing[]
  bookings       Booking[]
  wishlists      Wishlist[]
  sentMessages   Message[]        @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")
  hostApplications HostApplication?
  paymentMethods PaymentMethod[]

  @@map("users")
}

model Listing {
  id             Int              @id @default(autoincrement())
  hostId         Int              @map("host_id")
  title          String
  // entireUnit     Boolean          @default(true)
  room           Int              @map("room_count")
  washroom       Int              @map("washroom_count")
  capacity       Int              @map("guest_capacity")
  description    String?
  locationState  String?          @map("location_state")
  locationCountry String?         @map("location_country")
  latitude       Float?
  longitude      Float?
  pricePerNight  Decimal          @map("price_per_night") @db.Decimal(10, 2)
  facilities     Json?
  createdAt      DateTime         @default(now()) @map("created_at")
  
  // Relations
  host           User             @relation(fields: [hostId], references: [id])
  photos         ListingPhoto[]
  isAlwaysAvailable Boolean       @default(true) @map("is_always_available")
  availabilities Availability[]
  bookings       Booking[]
  wishlistItems  WishlistItem[]
  messages       Message[]

  @@map("listings")
}

model ListingPhoto {
  id             Int              @id @default(autoincrement())
  listingId      Int              @map("listing_id")
  photoUrl       String           @map("photo_url")
  
  // Relations
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("listing_photos")
}

model Availability {
  id             Int              @id @default(autoincrement())
  listingId      Int              @map("listing_id")
  startDate      DateTime         @map("start_date") 
  endDate        DateTime         @map("end_date") 
  isAvailable    Boolean          @default(true) @map("is_available")
  
  // Relations
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("availability")
}

model Booking {
  id             Int              @id @default(autoincrement())
  userId         Int              @map("user_id")
  listingId      Int              @map("listing_id")
  startDate      DateTime         @map("start_date") @db.Date
  endDate        DateTime         @map("end_date") @db.Date
  totalPrice     Decimal          @map("total_price") @db.Decimal(10, 2)
  paymentStatus  String           @default("pending") @map("payment_status")
  createdAt      DateTime         @default(now()) @map("created_at")
  
  // Relations
  user           User             @relation(fields: [userId], references: [id])
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("bookings")
}

model Wishlist {
  id             Int              @id @default(autoincrement())
  userId         Int              @map("user_id")
  name           String
  
  // Relations
  user           User             @relation(fields: [userId], references: [id])
  wishlistItems  WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id             Int              @id @default(autoincrement())
  wishlistId     Int              @map("wishlist_id")
  listingId      Int              @map("listing_id")
  
  // Relations
  wishlist       Wishlist         @relation(fields: [wishlistId], references: [id])
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("wishlist_items")
}

model Message {
  id             Int              @id @default(autoincrement())
  senderId       Int              @map("sender_id")
  receiverId     Int              @map("receiver_id")
  listingId      Int              @map("listing_id")
  content        String
  sentAt         DateTime         @default(now()) @map("sent_at")
  
  // Relations
  sender         User             @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User             @relation("ReceivedMessages", fields: [receiverId], references: [id])
  listing        Listing          @relation(fields: [listingId], references: [id])

  @@map("messages")
}

model HostApplication {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique @map("user_id")
  fullName       String?          @map("full_name")
  contactInfo    String?          @map("contact_info")
  bankAccount    String?          @map("bank_account")
  bankName       String?          @map("bank_name")
  status         String           @default("pending")
  createdAt      DateTime         @default(now()) @map("created_at")
  
  // Relations
  user           User             @relation(fields: [userId], references: [id])

  @@map("host_applications")
}

model PaymentMethod {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  stripePaymentMethodId String   @map("stripe_payment_method_id")
  createdAt             DateTime @default(now()) @map("created_at")
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}